<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="supportAppForAnypointPlatform-test-suite.xml" />
<!-- [STUDIO:"retryIfEmptyPayloadTest-error"]	<munit:test name="retryIfEmptyPayloadTest-error"  description="Test" expectedErrorType="CUSTOM:PAYLOAD_IS_EMPTY">
		<munit:behavior >
			<munit:set-event doc:name="Set Event"  >
				<munit:payload value='#[""]' />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to retryIfEmptyPayload"  name="retryIfEmptyPayload"/>
		</munit:execution>
	</munit:test> [STUDIO] -->
<!-- [STUDIO:"getIOBoundRequestsTest-ok"]	<munit:test name="getIOBoundRequestsTest-ok"  description="Test">
		<munit:behavior>
			<munit:set-event doc:name="Set Event"  >
				<munit:payload value='#[{&#10;	"domain": "some_domain",&#10;    "fullDomain": "some_fullDomain"&#10;}]' />
				<munit:variables >
					<munit:variable key="DB" value="some_DB" />
					<munit:variable key="proxy" value="some_proxy" />
					<munit:variable key="org_id" value="some_org_id" />
					<munit:variable key="currentEnv" value="some_currentEnv" />
					<munit:variable key="period" value="some_period" />
					<munit:variable key="token" value="some_token" />
				</munit:variables>
			</munit:set-event>
			<munit-tools:mock-when doc:name="Mock inbound"  processor="scripting:execute">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Get inboundRequests" attributeName="doc:name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#["{\"results\":[{\"statement_id\":0,\"series\":[{\"name\":\"app_inbound_metric\",\"tags\":{\"endpoint\":\"/test\"},\"columns\":[\"time\",\"sum\"],\"values\":[[1678802995382,8]]}]}]}"]' />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock outbound"  processor="scripting:execute" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Get outboundRequests" attributeName="doc:name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#["{\"results\":[{\"statement_id\":0}]}"]' />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to getIOBoundRequests"  name="getIOBoundRequests"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-equals doc:name="Assert equals"  actual="#[vars.IOBoundRequests]" expected='#[{&#10;        "application name": "some_domain",&#10;        "inboundRequests": [&#10;          {&#10;            "name": "/test",&#10;            "count": 8&#10;          }&#10;        ],&#10;        "outboundRequests": null&#10;      }]'/>
		</munit:validation>
	</munit:test> [STUDIO] -->
<!-- [STUDIO:"getApplicationsForMetrixTest-ok"]	<munit:test name="getApplicationsForMetrixTest-ok"  description="Test">
		<munit:behavior>
			<munit:set-event doc:name="Set Event" >
				<munit:payload value='#[{&#10;	"id": "some_curEnv",&#10;    "name": "some_curEnvName"&#10;}]' />
				<munit:variables >
					<munit:variable key="applicationsForAnalysis" value='#[ ["some_domain"] ]' />
					<munit:variable key="currentEnvName" value="some_curEnvName" />
				</munit:variables>
			</munit:set-event>
			<munit-tools:mock-when doc:name="Mock Req"  processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="HTTPS GET /cloudhub/api/v2/applications" attributeName="doc:name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[[{&#10;	"domain":"some_domain"&#10;}]]' />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock getIOBoundRequests"  processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="getIOBoundRequests" attributeName="name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:variables >
						<munit-tools:variable key="IOBoundRequests" value='#[{"application name": "some_domain","inboundRequests":[{"name":"/test","count":8}],"outboundRequests":null}]' mediaType="application/java" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to getApplicationsForMetrix"  name="getApplicationsForMetrix"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-equals doc:name="Assert equals"  actual="#[vars.environmentApplication]" expected='#[{&#10;	"environment":"some_curEnvName",&#10;	"applications":[&#10;		{&#10;		"application name": "some_domain",&#10;		"inboundRequests": [&#10;			{&#10;			"name": "/test",&#10;			"count": 8&#10;			}&#10;		],&#10;		"outboundRequests": null&#10;		}	&#10;	]&#10;}]' />
		</munit:validation>
	</munit:test> [STUDIO] -->
	<munit:before-suite name="supportAppForAnypointPlatform-test-suiteBefore_Suite"  >
		<munit-tools:store doc:name="Store"  key='#["token"]'>
			<munit-tools:value ><![CDATA[#["some_token"]]]></munit-tools:value>
		</munit-tools:store>
	</munit:before-suite>
</mule>
